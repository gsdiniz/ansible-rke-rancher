- name: Validate Configs
  hosts: "masters"
  become: yes
  gather_facts: yes
  tasks:
    - name: Validate primary_master is defined and in masters group
      ansible.builtin.assert:
        that:
          - primary_master is defined
          - primary_master in groups['masters']
        fail_msg: "primary_master must be a master node"
        quiet: true

    - name: Validate rancher_hostname is defined
      ansible.builtin.assert:
        that:
          - rancher_hostname is defined
        fail_msg: "rancher_hostname variable is not defined"
        quiet: true

    - name: Show ansible_os_family
      ansible.builtin.debug:
        var: ansible_os_family

    - name: Ensure python3-pip is installed (for Debian/Ubuntu)
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: yes
      when: ansible_os_family == "Debian"
      
    - name: Ensure python3-pip is installed (for RHEL/CentOS/Fedora)
      ansible.builtin.yum: # Or 'dnf' for newer Fedora/RHEL
        name: python3-pip
        state: present
      when: ansible_os_family == "RedHat" or ansible_os_family == "Fedora" or ansible_os_family == "Rocky"

    - name: Install the Kubernetes Python client library
      ansible.builtin.pip:
        name: kubernetes
        state: present
        executable: pip 

- name: Install Rancher on RKE2 Cluster
  hosts: "{{ hostvars['localhost']['primary_master'] | default('localhost') }}"
  become: yes
  gather_facts: no
  collections:
    - kubernetes.core
  vars:
    rancher_namespace: cattle-system
    cert_manager_namespace: cert-manager
    cert_manager_version: v1.13.1
    rancher_hostname: "{{ hostvars['localhost']['rancher_hostname'] | mandatory }}"
    kubeconfig_path: /etc/rancher/rke2/rke2.yaml
  tasks:
    - name: Check if kubectl exists
      stat:
        path: /usr/local/bin/kubectl
      register: kubectl_check

    - name: Fail if kubectl was not found
      ansible.builtin.fail:
        msg: "Error: kubectl was not found at /usr/local/bin/kubectl."
      when: not kubectl_check.stat.exists

    - name: Check if helm exists
      stat:
        path: /usr/local/bin/helm
      register: helm_check

    - name: Fail if helm was not found
      ansible.builtin.fail:
        msg: "Error: helm was not found at /usr/local/bin/helm."
      when: not helm_check.stat.exists

    - name: Create cattle-system namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ rancher_namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
      register: namespace_result
      failed_when: namespace_result.failed and 'already exists' not in namespace_result.msg

    - name: Create cert-manager namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ cert_manager_namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
      register: cert_manager_ns_result
      failed_when: cert_manager_ns_result.failed and 'already exists' not in cert_manager_ns_result.msg

    - name: Download Cert-Manager CRDs
      ansible.builtin.get_url:
        url: "https://github.com/cert-manager/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml"
        dest: "/tmp/cert-manager.crds.yaml"
        headers:
          Accept: "application/octet-stream"

    - name: Apply cert-manager CRDs
      kubernetes.core.k8s:
        state: present
        src: "/tmp/cert-manager.crds.yaml"
        kubeconfig: "{{ kubeconfig_path }}"
      register: crd_result
      failed_when: crd_result.failed and 'already exists' not in crd_result.msg

    - name: Copy additional CA PEM file
      ansible.builtin.copy:
        src: ./certs/tls-rancher/ca-additional.pem
        dest: /root/ca-additional.pem
        mode: '0600'
      register: ca_copy

    - name: Create tls-ca-additional secret
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: tls-ca-additional
            namespace: "{{ rancher_namespace }}"
          type: Opaque
          data:
            ca-additional.pem: "{{ lookup('file', './certs/tls-rancher/ca-additional.pem') | b64encode }}"
      when: ca_copy.changed

    - name: Copy internal CA PEM file
      ansible.builtin.copy:
        src: ./certs/tls-rancher/internal-ca.pem
        dest: /root/internal-ca.pem
        mode: '0600'
      register: internal_ca_copy

    - name: Create tls-ca secret
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: tls-ca
            namespace: "{{ rancher_namespace }}"
          type: Opaque
          data:
            cacerts.pem: "{{ lookup('file', './certs/tls-rancher/internal-ca.pem') | b64encode }}"
      when: internal_ca_copy.changed

    - name: Copy TLS key file
      ansible.builtin.copy:
        src: ./certs/tls-rancher/rancher.local.key
        dest: /root/tls.key
        mode: '0600'
      register: tls_key_copy

    - name: Copy TLS cert file
      ansible.builtin.copy:
        src: ./certs/tls-rancher/rancher.local.crt
        dest: /root/tls.crt
        mode: '0644'
      register: tls_cert_copy

    - name: Create tls-rancher-ingress secret
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: tls-rancher-ingress
            namespace: "{{ rancher_namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', './certs/tls-rancher/rancher.local.crt') | b64encode }}"
            tls.key: "{{ lookup('file', './certs/tls-rancher/rancher.local.key') | b64encode }}"
      when: tls_key_copy.changed or tls_cert_copy.changed

    - name: Add Rancher Helm repository
      kubernetes.core.helm_repository:
        name: rancher-stable
        binary_path: "/usr/local/bin/helm"
        repo_url: https://releases.rancher.com/server-charts/stable
        state: present

    - name: Install Rancher via Helm
      kubernetes.core.helm:
        binary_path: "/usr/local/bin/helm"
        name: rancher
        chart_ref: rancher-stable/rancher
        release_namespace: "{{ rancher_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
        state: present
        values:
          hostname: "{{ rancher_hostname }}"
          additionalTrustedCAs: true
          privateCA: true
          ingress:
            tls:
              source: secret
      register: helm_result
      failed_when: helm_result.failed and 'already exists' not in helm_result.msg